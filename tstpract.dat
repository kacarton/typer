A total computer system includes both hardware and software. Hardware consists of the physical components and all associated equipments. Software refers to the programs that are written for the computers.
It is possible to be familiar with various aspects of computer software without being concerned with details of how the computer hardware operates. It is alsopossible to design parts of the hardware without a knlowledge of its software capabilities. However, those concerned with computer architecture should have a knowledge of both hardware and software because the two branches influence each other.
A program written by a user may be either dependent or independent of the physical computer that runs his program. For example, a program written in standard FORTRAN is machine independent.

Programs written in a computer's machine language can be directly executed by the computer's electronic circuits, without the need for any intervening interpreters or translators. These electronic circuits, along with the memory and input/output devices, form the computer's hardware consists of tangible objects--integrated circuits, printed circuit boards, cables, power supplies, memories, card readers, line printers, and terminals--rather than abstract ideas or instructions. how these components are constructed and how they work belong to the domain of elecrtical engineering.

  The processor, often called the central processing unit(cpu) or main processor, is the component that processes or manipulates data. A processor can do nothing without a program to provide control; Whatever intelligence a computer has is derived from software, not hardware. The processor manipulates data stored in main memory under the control of a program stored in main memory.
  The processor is controlled by program. A program consists of aseries of instructions. Each instruction is a group of bits that tells the computer to perform one of its basic functions: add, subtract, multiply, divide, compare, copy, start input, or start output. Each instruction consists of two parts, an operation code and one or more operands. The operation code tells the computer what to do (for xample, add, subtract, compare), and the operands identify the memory locations that will participate in the operation.

 Lesson four THE MAIN MEMORY
The main memory of most computers is composed of random access memory, or RAM. The programmer (through a program, of course) can read or write RAM. Input data can be stored in RAM, destroying the old contents of the selected bytes or words. Once the data are in, they can be read and manipulated by the processor, and results written to other memory locations. Finally, the contents can be sent to an output device.
When a program is finished, a new program can be copied into RAM, erasing the old one in the process. The contents of RAM are easy to change. Usually, RAM's flexibility is an advantage. Occasionally, however, it can be a problem. Consider, for example, the automatic teller terminals used in many banks. They are controlled by small computers which, in turn, are controlled by programs. A sharp programmer might be able to modify one of those programs to give free assess to certain accounts. Needless to say, the bank could not tolerate such changes. The bank needs aprogram that can be read by the processor, but not modified. Such program are stored in read-only memory, or ROM. Another good example of a ROM-based program is the BASIC language inter preter found in many microcomputers. As the name implies, ROM is"permanent" memory that can be read, but not written.
  Main memory on the compter is used to store instructions and data while the instruction are being executed and the data are being processed. In most applications, however, these instructions and data must be stored elsewhere when they are not being used because main memory is not large enough to store the instructions and data for all applications at one time. Secondary storage units are used to store instructions and data when they are not being used in main memory of the computer.

Edit is able to run external programs for assembling, linking and debugging that source file. The default options set in 'Options External programs' are for use with Borland's Turbo Assembler, Turbo Linker and Turbo Debugger. But you can change these options in the mentioned menu to use your favourite programs.

The input/output subsystem of a computer provides an efficient mode of comunication between the central system and the outside envionment. Programs and data must be entered into computer memory for processing and results obtained from computations must be recorded or displayed for the user. A computer serves no useful purpose wihout the ability to receive information from an outside source and to rtansimit results in a meaningful form.
The simplest and cheapest way to comunicate with a computer is by means of a type writer keyboard and printer. However, this is a very slow process and it wastes computer time.

A group of interconnected computers capable of exchanging information is called a network. Networks are organized as an interconnected series of nodes, each node consisting of one or more computers. Because the computers comprising the network can comunicate with each other, the people using any of the computers can draw on the resources of any of the other computers in the network.

Software consists of algorithms(detailed instructions telling how to do something) and their computer representations--namely programs.
Programs can be represented on punched cards, magnetic tape, photographic film, and other media, but the essence of software is the set of instructions that make up the programs, not the physical media on which they are recorded.

This software is provided "as is" and without warranties as to performance of merchantability or any other warranties whether expressed or implied.
Because of the various hardware and software environments in which this program may be used, no warranty of fittness for a particular purpose is offered. Use it entirely at your own risk.
This program is shareware. You can test it and check its usefullness for you before you actually buy the software. If you continue using the program after this time period you have to register it. If you don't register you will use the program as an illegal copy.

Before you can work with Edit you have to configure it. Select all external programs and enter the working directories as described in Edit's Tutorial. You will find it in the help menu or in the help index under 'Tutorial'.

There is a core group of contributors (informally called the "core") which was formed from the project founders and is augmented from time to time when core members nominate outstanding contributors and the rest of the core members agree. The core group focus is more on "business" issues and limited-circulation things like security problems than on mainstream code development. The term "The Apache Group" technically refers to this core of project contributors.
Our primary method of communication is our mailing list. Approximately 40 messages a day flow over the list, and are typically very conversational in tone.
  We discuss new features to add, bug fixes, user problems, developments in the web server community, release dates, etc. The actual code development takes place on the developers' local machines, with proposed changes communicated using a patch (output of a unified "diff -u oldfile newfile" command), and committed to the source repository by one of the core developers using remote CVS. Anyone on the mailing list can vote on a particular issue, but we only count those made by active members or people who are known to be experts on that part of the server.
Vetoes must be accompanied by a convincing explanation.
Apache exists to provide a robust and commercial-grade reference implementation of the HTTP protocol. It must remain a platform upon which individuals and institutions can build reliable systems, both for experimental purposes and for mission-critical purposes.
We believe the tools of online publishing should be in the hands of everyone, and software companies should make their money providing value-added services such as specialized modules and support, amongst other things. We realize that it is often seen as an economic advantage for one company to "own" a market - in the software industry that means to control tightly a particular conduit such that all others must pay. This is typically done by "owning" the protocols through which companies conduct business, at the expense of all those other companies. To the extent that the protocols of the World Wide Web remain "unowned" by a single company, the Web will remain a level playing field for companies large and small. Thus, "ownership" of the protocol must be prevented, and the existence of a robust reference implementation of the protocol, available absolutely for free to all companies, is a tremendously good thing.
  Furthermore, Apache is an organic entity; those who benefit from it by using it often contribute back to it by providing feature enhancements, bug fixes, and support for others in public newsgroups.
The amount of effort expended by any particular individual is usually fairly light, but the resulting product is made very strong. This kind of community can only happen with freeware -- when someone pays for software, they usually aren't willing to fix its bugs.
  One can argue, then, that Apache's strength comes from the fact that it's free, and if it were made "not free" it would suffer tremendously, even if that money were spent on a real development team.
We want to see Apache used very widely -- by large companies, small companies, research institutions, schools, individuals, in the intranet environment, everywhere -- even though this may mean that companies who could afford commercial software, and would pay for it without blinking, might get a "free ride" by using Apache.
  We would even be happy if some commercial software companies completely dropped their own HTTP server development plans and used Apache as a base, with the proper attributions as described in the LICENSE file.

Note: This does not only apply to php4ts.dll but in fact to every DLL which gets loaded through PHP too. So, if you've problems running your PHP CLI application because it can't load a certain library but you're sure it's there, try this tool.
